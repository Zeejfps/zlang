module std.list {

    struct Allocator = std.mem.Allocator;
    struct Array<T> = std.array.Array<T>;

    struct List<T> {
        allocator: Allocator*;
        capacity: u32;
        item_count: u32;
        items: T*;
    }

    func create<T>(allocator: Allocator*) -> List<T>* {
        const list = allocator.alloc<List<T>>();
        list.allocator = allocator;
        list.capacity = 10;
        list.items = allocator.malloc<T>(list.capacity);
        list.item_count = 0;
        return list;
    }

    func destroy<T>(list: List<T>*){
        const allocator = list.allocator;
        allocator.free(list.items)
        allocator.free(list);
        list.item_count = 0;
        list.capacity = 0;
        list.allocator = nil;
    }

    func push_item<T>(list: List<T>*, item: T) {
        const new_count = list.item_count + 1;
        if (new_count > list.capacity) {
            expand(list);
        }
        list.items[list.item_count] = item;
        list.item_count += 1;
    }

    func pop_item<T>(list: List<T>*) -> T {
        const item = list.items[list.item_count];
        list.item_count -= 1;
        return item;
    }

    func insert_item<T>(list: List<T>*, item: T, index: u32);
    func remove_item<T>(list: List<T>*, item: T) -> bool;
    func get_item<T>(list: List<T>*, index: u32) -> T;

    func expand(list: List<T>*) {
        const items = list.items;
        const allocator = list.allocator;
        const new_capacity = list.capacity * 2;
        const new_items = allocator.alloc<T>(new_capacity);
        for (var i = 0; i < list.item_count; i++) {
            new_items[i] = items[i];
        }
        allocator.free(items);
        list.items = new_items;
    }

    operator [] <T>(list: List<T>*, index: u32) -> T {
        return list.items[index];
    }
}